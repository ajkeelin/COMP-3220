#Austin Keelin - ajk0033
#Assignment 1

import unittest
from Token import Token
from Scanner import Scanner

class Test_Token(unittest.TestCase):
   # Test the toString function
   def test_toString(self):
      token = Token('my type', 'my text')
      self.assertEqual('[Type:my type, Text:my text]', token.toString())
      self.assertEqual('my type', token.type)
      self.assertEqual('my text', token.text)
   
   # Test the getText function   
   def test_getText(self):
      token = Token('my type', 'my text')
      self.assertEqual('my text', token.getText())
      self.assertEqual('my text', token.text)
   
   # Test the getType function   
   def test_getType(self):
      token = Token('my type', 'my text')
      self.assertEqual('my type', token.getType())
      self.assertEqual('my type', token.type)
   
   # Tests scanning and returning all token types from 3 example
   # sentences in input.txt   
   def test_input(self):
      print("\n")
      scan = Scanner("input.txt") 
      tok = scan.nextToken()
      
      #Sentence 1
      print("Sentence 1\n")
      self.assertEqual('[Type:ID, Text:x]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:=, Text:=]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:unknown, Text:unknown]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:INT, Text:3]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:*, Text:*]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:INT, Text:4]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      
      #Sentence 2
      print("\n\nSentence 2\n")
      self.assertEqual('[Type:ID, Text:y]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:=, Text:=]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:(, Text:(]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:ID, Text:x]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:+, Text:+]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:INT, Text:5]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:), Text:)]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:/, Text:/]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:ID, Text:var]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:unknown, Text:unknown]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      
      #Sentence 3
      print("\n\nSentence 3\n")
      self.assertEqual('[Type:print, Text:print]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:(, Text:(]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:ID, Text:var]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:*, Text:*]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:(, Text:(]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:ID, Text:x]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:-, Text:-]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:whitespace, Text:]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:INT, Text:1]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:), Text:)]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:), Text:)]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
      self.assertEqual('[Type:eof, Text:eof]', tok.toString())
      print(tok.toString())
      tok = scan.nextToken()
   
   # Attempts to open input2.txt, which does not exist.
   # Creating a scanner for input2.txt will fail   
   def test_input2(self):
      print("\nOpening non-existant file:")
      scan = Scanner("input2.txt")
      
if __name__ == '__main__':
   unittest.main()